#Python Code for first Question

import numpy as np
import matplotlib.pyplot as plt

N = 100  # Number of resistor branches
sets_num = 20  # Number of sets of V and G considered for the plot

Vin = np.random.uniform(0, 1, (N, sets_num))  # Generating random Vin values from (0V - 1V)
G1 = np.random.uniform(10e-6, 100e-6, (N, 1))  # Generating random G values from (10μS - 100μS)

# Iout_a and I_ideal
Iout_a = np.sum(Vin * (G1), axis=0)  # Sum of N branches
I_ideal = np.sum(Vin * G1, axis=0)  # Equal to Iout_a in this case

# plot of Iout vs. I_ideal
plt.scatter(Iout_a, I_ideal, color='r', label="Iout vs. I_ideal")
plt.xlabel("Iout_a")
plt.ylabel("I_ideal")
plt.legend()
plt.grid(True)
plt.show()

# Printing the results
for i in range(20):
    print(f"Set number {i+1}: Iout_a = {Iout_a[i]:.5f} Ampere, I_ideal = {I_ideal[i]:.5f} Ampere")

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Python code for Question2

import numpy as np
import matplotlib.pyplot as plt

N = 100  # Number of resistor branches
sets_num = 20  # Number of sets of V and G considered for the plot

Vin = np.random.uniform(0, 1, (N, sets_num))  # Generating random Vin values from (0V - 1V)
G1 = np.random.uniform(10e-6, 100e-6, (N, 1))  # Generating random G values from (10μS - 100μS)
G2= 0.1                                         # G wire
# Iout_a and I_ideal
Iout_b = np.sum((Vin / (1 + G2 / G1)) * G1, axis=0)  # Sum of N branches
I_ideal = np.sum(Vin * G1, axis=0)  # Equal to Iout_a in this case

# plot of Iout vs. I_ideal
plt.scatter(Iout_b, I_ideal, color='r', label="Iout_b vs. I_ideal")
plt.xlabel("Iout_b")
plt.ylabel("I_ideal")
plt.legend()
plt.grid(True)
plt.show()

# Printing the results
for i in range(20):
    print(f"Set number {i+1}: Iout_b = {Iout_b[i]:.7f} Ampere, I_ideal = {I_ideal[i]:.7f} Ampere")
#-------------------------------------------------------------------------------------------------------------------------------



#Python code for Question3

import numpy as np
import matplotlib.pyplot as plt


N = 100  # Number of resistor branches
sets_num = 20  # Number of sets of V and G considered for the plot
Gwire = 0.1  # Wire conductance
V_offset = 0.05  # Voltage offset of the first column's ground


Iout_c_values = []
I_ideal_values = []

# Generate multiple sets of Vin and G values
for i in range(sets_num):
    Vin = np.random.uniform(0, 1, (N, 2))  
    G = np.random.uniform(10e-6, 100e-6, (N, 2)) 

    
    G1 = G[:, 0].reshape(N, 1)  # First conductance column
    G2 = G[:, 1].reshape(N, 1)  # Second conductance column
    Vin1 = Vin[:, 0].reshape(N, 1)  # First voltages column
    Vin2 = Vin[:, 1].reshape(N, 1)  # Second voltages column

    # Effective Conductance of the Second Column
    G_eff = G2 + (Gwire * G1) / (Gwire + G1)

    # Effective Voltage of the Second Column
    V_eff = Vin2 - (V_offset * Gwire / G_eff)

    # I_ideal
    I_ideal = np.sum(Vin2 * G2)

    # Iout_c 
    Iout_c = np.sum(V_eff * G_eff)

    I_ideal_values.append(I_ideal)
    Iout_c_values.append(Iout_c)

# Scatter plot of Iout_c vs. I_ideal
plt.figure(figsize=(8, 6))
plt.scatter(I_ideal_values, Iout_c_values, color='r', alpha=0.8)
plt.xlabel(r"$I_{ideal}$ (Ampere)")
plt.ylabel(r"$I_{out_c}$ (Ampere)")
plt.title(r"Scatter Plot of $I_{out_c}$ vs. $I_{ideal}$ with Inter-Column Conductance")
plt.grid(True)

plt.show()


for i in range(20):
    print(f"Set {i+1}: Iout_c = {Iout_c_values[i]:.5f} Ampere, I_ideal = {I_ideal_values[i]:.5f} Ampere")
